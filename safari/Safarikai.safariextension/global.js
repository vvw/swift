// Generated by CoffeeScript 1.6.3
(function() {
  window.Safarikai = {
    initialize: function() {
      this.queryWord = "";
      return this.result = "";
    },
    sendStatus: function(page) {
      return page.dispatchMessage("status", {
        enabled: this.enabled(),
        highlightText: safari.extension.settings.highlightText === 'on'
      });
    },
    enabled: function() {
      return safari.extension.settings.enabled === 'on';
    },
    toggle: function() {
      safari.extension.settings.enabled = this.enabled() ? 'off' : 'on';
      return this.updateStatus();
    },
    lookup: function(word, url, page) {
      if (this.enabled()) {
        if (this.queryWord !== word) {
          this.queryWord = word;
          this.result = this.dict.find(this.queryWord, safari.extension.settings.resultsLimit);
        }
        return page.dispatchMessage("showResult", {
          word: this.result.match,
          url: url,
          result: this.result.results
        });
      }
    },
    status: function(page) {
      return this.sendStatus(page);
    },
    updateStatus: function() {
      var tab, win, _i, _len, _ref, _results;
      this.prepareDictionary();
      _ref = safari.application.browserWindows;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        win = _ref[_i];
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = win.tabs;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            tab = _ref1[_j];
            _results1.push(this.sendStatus(tab.page));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    },
    prepareDictionary: function() {
      var _ref;
      if (this.enabled()) {
        this.dict || (this.dict = new Dictionary);
        return this.dict.load();
      } else {
        if ((_ref = this.dict) != null) {
          _ref.unload();
        }
        return this.dict = null;
      }
    }
  };

  Safarikai.initialize();

  Safarikai.prepareDictionary();

  safari.application.addEventListener("command", function(e) {
    var _ref;
    return (_ref = Commands[e.command]) != null ? typeof _ref.invoke === "function" ? _ref.invoke(e) : void 0 : void 0;
  });

  safari.application.addEventListener('validate', function(e) {
    var _ref;
    return (_ref = Commands[e.command]) != null ? typeof _ref.validate === "function" ? _ref.validate(e) : void 0 : void 0;
  });

  safari.extension.settings.addEventListener("change", function(e) {
    return Safarikai.updateStatus();
  });

  safari.application.addEventListener("message", function(e) {
    var messageData;
    messageData = e.message;
    switch (e.name) {
      case "lookupWord":
        return Safarikai.lookup(messageData.word, messageData.url, e.target.page);
      case "queryStatus":
        return Safarikai.status(e.target.page);
    }
  });

}).call(this);
